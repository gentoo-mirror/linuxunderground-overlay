diff -ur azure-cli-profile-2.1.5.a/azure/cli/command_modules/profile/custom.py azure-cli-profile-2.1.5.b/azure/cli/command_modules/profile/custom.py
--- azure-cli-profile-2.1.5.a/azure/cli/command_modules/profile/custom.py	2019-04-05 00:46:52.000000000 +0200
+++ azure-cli-profile-2.1.5.b/azure/cli/command_modules/profile/custom.py	2019-08-20 18:01:00.328829969 +0200
@@ -14,6 +14,15 @@
 
 logger = get_logger(__name__)
 
+cloud_resource_type_mappings = {
+    "oss-rdbms": "ossrdbms_resource_id",
+    "arm": "active_directory_resource_id",
+    "aad-graph": "active_directory_graph_resource_id",
+    "ms-graph": "microsoft_gragh_resource_id",
+    "batch": "batch_resource_id",
+    "media": "media_resource_id",
+    "data-lake": "active_directory_data_lake_resource_id"
+}
 
 _CLOUD_CONSOLE_LOGOUT_WARNING = ("Logout successful. Re-login to your initial Cloud Shell identity with"
                                  " 'az login --identity'. Login with a new identity with 'az login'.")
@@ -50,13 +59,18 @@
     print(json.dumps(profile.get_sp_auth_info(subscription), indent=2))
 
 
-def get_access_token(cmd, subscription=None, resource=None):
+def get_access_token(cmd, subscription=None, resource=None, resource_type=None):
     '''
     get AAD token to access to a specified resource
     :param resource: Azure resource endpoints. Default to Azure Resource Manager
+    :param resource-type: Name of Azure resource endpoints. Can be used instead of resource.
     Use 'az cloud show' command for other Azure resources
     '''
-    resource = (resource or cmd.cli_ctx.cloud.endpoints.active_directory_resource_id)
+    if resource is None and resource_type is not None:
+        endpoints_attr_name = cloud_resource_type_mappings[resource_type]
+        resource = getattr(cmd.cli_ctx.cloud.endpoints, endpoints_attr_name)
+    else:
+        resource = (resource or cmd.cli_ctx.cloud.endpoints.active_directory_resource_id)
     profile = Profile(cli_ctx=cmd.cli_ctx)
     creds, subscription, tenant = profile.get_raw_token(subscription=subscription, resource=resource)
     return {
@@ -109,7 +123,7 @@
         if in_cloud_console():
             return profile.find_subscriptions_in_cloud_console()
         return profile.find_subscriptions_in_vm_with_msi(username, allow_no_subscriptions)
-    elif in_cloud_console():  # tell users they might not need login
+    if in_cloud_console():  # tell users they might not need login
         logger.warning(_CLOUD_CONSOLE_LOGIN_WARNING)
 
     if username:
diff -ur azure-cli-profile-2.1.5.a/azure/cli/command_modules/profile/__init__.py azure-cli-profile-2.1.5.b/azure/cli/command_modules/profile/__init__.py
--- azure-cli-profile-2.1.5.a/azure/cli/command_modules/profile/__init__.py	2019-04-05 00:46:52.000000000 +0200
+++ azure-cli-profile-2.1.5.b/azure/cli/command_modules/profile/__init__.py	2019-08-20 18:01:08.992297281 +0200
@@ -5,10 +5,13 @@
 
 from azure.cli.core import AzCommandsLoader
 from azure.cli.core.commands import CliCommandType
+from azure.cli.core.commands.parameters import get_enum_type
 
 from azure.cli.command_modules.profile._format import transform_account_list
 import azure.cli.command_modules.profile._help  # pylint: disable=unused-import
 
+cloud_resource_types = ["oss-rdbms", "arm", "aad-graph", "ms-graph", "batch", "media", "data-lake"]
+
 
 class ProfileCommandsLoader(AzCommandsLoader):
 
@@ -55,9 +58,11 @@
 
         with self.argument_context('logout') as c:
             c.argument('username', help='account user, if missing, logout the current active account')
+            c.ignore('_subscription')  # hide the global subscription parameter
 
         with self.argument_context('account') as c:
             c.argument('subscription', options_list=['--subscription', '-s'], arg_group='', help='Name or ID of subscription.', completer=get_subscription_id_list)
+            c.ignore('_subscription')
 
         with self.argument_context('account list') as c:
             c.argument('all', help="List all subscriptions, rather just 'Enabled' ones", action='store_true')
@@ -67,5 +72,8 @@
         with self.argument_context('account show') as c:
             c.argument('show_auth_for_sdk', options_list=['--sdk-auth'], action='store_true', help='Output result to a file compatible with Azure SDK auth. Only applicable when authenticating with a Service Principal.')
 
+        with self.argument_context('account get-access-token') as c:
+            c.argument('resource_type', get_enum_type(cloud_resource_types), options_list=['--resource-type'], arg_group='', help='Type of well-known resource.')
+
 
 COMMAND_LOADER_CLS = ProfileCommandsLoader
